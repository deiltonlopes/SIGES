-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/franklingg/SIGES#readme</a>
@package SIGES
@version 0.1.0.0


module Datatypes

-- | Versão resumida de usuário do sistema. Mantém dados essenciais, mas
--   omite dados sensíveis que não serão necessários.
data User
User :: String -> String -> Bool -> User

-- | O nome do Usuário.
[nameUser] :: User -> String

-- | O e-mail do usuário.
[emailUser] :: User -> String

-- | Indicação se o usuário é ou não um administrador.
[isAdminUser] :: User -> Bool

-- | Versão completa do usuário do sistema, a ser usada quando se precisa
--   de todas as informações do usuário.
data UserFull
UserFull :: String -> String -> Text -> String -> Bool -> UserFull

-- | O nome do usuário.
[name] :: UserFull -> String

-- | O e-mail do usuário.
[email] :: UserFull -> String

-- | A senha (criptografada) do usuário.
[password] :: UserFull -> Text

-- | A data em que o usuário se registrou.
[registrationDate] :: UserFull -> String

-- | Indicação se o usuário é administrador.
[isAdmin] :: UserFull -> Bool

-- | Define o tipo ErrorLog como uma String.
type ErrorLog = String

-- | As diferentes telas do sistema.
data Screen

-- | A tela de saída do sistema.
ExitScreen :: Screen

-- | A tela inicial, quando nenhum administrador foi cadastrado ainda.
FirstScreen :: Screen

-- | A tela inicial do sistema quando já existem usuários cadastrados.
StartScreen :: Screen

-- | A tela de Login.
LoginScreen :: Screen

-- | A tela após um usuário logar-se no sistema.
LoggedScreen :: Screen

-- | A tela exibida após um administrador fazer login no sistema.
AdminScreen :: Screen

-- | A tela de cadastrar uma nova sala no sistema
InsertRoomScreen :: Screen

-- | A tela de cadastro do usuário.
SignUpScreen :: Screen

-- | A tela de remoção de um usuário.
RemoveUserScreen :: Screen

-- | A tela de visualização de salas específica de um usuário.
ViewUserScreen :: Screen

-- | A tela com opções de visualização de salas.
ViewScreen :: Screen

-- | A tela de visualização de uma sala específica.
ViewRoomScreen :: Screen

-- | A tela de busca de salas por filtros.
ViewFilterScreen :: Screen

-- | A tela de exibição de relatório de ocupação para uma sala específica.
ReportRoomScreen :: Screen

-- | A tela de exibição de relatório de ocupação para todas as salas em um
--   determinado dia.
ReportDayScreen :: Screen

-- | A tela para se fazer uma nova reserva em uma sala.
CreateReservationScreen :: Screen

-- | A tela para se editar uma reserva previamente feita.
EditReservationScreen :: Screen

-- | A tela para se remover uma reserva previamente feita.
RemoveReservationScreen :: Screen

-- | Uma sala do sistema SIGES.
data Room
Room :: String -> [Reservation] -> [Resource] -> Int -> String -> RoomCategory -> Room

-- | O código da sala.
[code] :: Room -> String

-- | A agenda onde são armazenadas todas as reservas ativas para esta sala.
[schedule] :: Room -> [Reservation]

-- | A lista de recursos oferecidos pela sala.
[resources] :: Room -> [Resource]

-- | A quantidade de pessoas suportada pela sala.
[capacity] :: Room -> Int

-- | A Localização da Sala.
[localization] :: Room -> String

-- | A categoria da sala.
[category] :: Room -> RoomCategory

-- | As reservas de salas do sistema.
data Reservation
Reservation :: String -> String -> LocalTime -> LocalTime -> Reservation

-- | O responsável pela reserva.
[requester] :: Reservation -> String

-- | A descrição do evento da reserva.
[description] :: Reservation -> String

-- | O tempo de início do evento.
[startTime] :: Reservation -> LocalTime

-- | O tempo de finalização do evento.
[finishTime] :: Reservation -> LocalTime

-- | As categorias de sala oferecidas pelo sistema.
data RoomCategory

-- | Sala que funciona como um laboratório.
Laboratory :: RoomCategory

-- | Sala que funciona como um auditório.
Auditorium :: RoomCategory

-- | Sala que funciona como uma sala de aula.
Classroom :: RoomCategory

-- | Sala que funciona como um escritório.
Office :: RoomCategory

-- | Sala que funciona como um depósito.
Warehouse :: RoomCategory

-- | Os tipos de recursos existentes no sistema.
data ResourceKind

-- | Projetor ou Datashow.
Projector :: ResourceKind

-- | Microscópio.
Microscope :: ResourceKind

-- | Escrivaninha.
Desk :: ResourceKind

-- | Computador.
Computer :: ResourceKind

-- | Quadro negro ou branco.
Board :: ResourceKind

-- | Ar condicionado.
AirConditioner :: ResourceKind

-- | Os recursos oferecidos pelas salas do sistema.
data Resource
Resource :: ResourceKind -> Int -> Resource

-- | O tipo do recurso.
[resourceKind] :: Resource -> ResourceKind

-- | A quantidade do recurso que a sala oferece.
[resourceQuantity] :: Resource -> Int
instance GHC.Generics.Generic Datatypes.User
instance GHC.Classes.Eq Datatypes.User
instance GHC.Generics.Generic Datatypes.UserFull
instance GHC.Show.Show Datatypes.UserFull
instance GHC.Classes.Eq Datatypes.UserFull
instance GHC.Classes.Eq Datatypes.Screen
instance GHC.Generics.Generic Datatypes.Reservation
instance GHC.Classes.Eq Datatypes.Reservation
instance GHC.Generics.Generic Datatypes.RoomCategory
instance GHC.Show.Show Datatypes.RoomCategory
instance GHC.Classes.Eq Datatypes.RoomCategory
instance GHC.Generics.Generic Datatypes.ResourceKind
instance GHC.Show.Show Datatypes.ResourceKind
instance GHC.Classes.Eq Datatypes.ResourceKind
instance GHC.Generics.Generic Datatypes.Resource
instance GHC.Classes.Eq Datatypes.Resource
instance GHC.Generics.Generic Datatypes.Room
instance GHC.Classes.Eq Datatypes.Room


module Manager

-- | This function is equivalent to:
--   
--   <pre>
--   <a>validatePassword</a> policy password == <a>ValidPassword</a>
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; let pass = mkPassword "This_Is_Valid_PassWord1234"
--   
--   &gt;&gt;&gt; isValidPassword defaultPasswordPolicy_ pass
--   True
--   </pre>
isValidPassword :: ValidPasswordPolicy -> Password -> Bool

-- | Unchangeable <a>defaultPasswordPolicy</a>, but guaranteed to be valid.
defaultPasswordPolicy_ :: ValidPasswordPolicy


module Handlers.DataHandler

-- | Esta função tem o valor igual ao caminho para o arquivo json com os
--   dados temporários de usuário.
userTmpJSON :: FilePath

-- | Esta função tem o valor igual ao caminho para o arquivo json com os
--   dados de usuário.
userJSON :: FilePath

-- | Dado um FilePath, esta função verifica se ele se refere a um arquivo
--   existente.
fileExists :: FilePath -> IO Bool

-- | Esta função verifica os usuários cadastrados no sistema e retornará um
--   valor booleano true caso o sistema não possua nenhum usuário
--   cadastrado ainda, e false em caso contrário.
noUsersYet :: IO Bool

-- | Esta função considera um UserFull, e caso o seu e-mail já não esteja
--   cadastrado no sistema,. ela o incluirá no sistema, retornando um valor
--   booleano indicando se foi possível incluir o novo usuário.
saveUser :: UserFull -> IO Bool

-- | Esta função considera uma String, e caso ela corresponda ao e-mail de
--   um dos usuários, a função eliminará o usuário equivalente do sistema,
--   retornando um valor booleano indicando se a remoção pôde ser feita.
deleteUser :: String -> IO Bool

-- | Esta função considerará uma String, e retornará o usuário cadastrado
--   no sistema com o e-mail igual a esta String, caso exista.
getUser :: String -> IO (Maybe UserFull)

-- | Esta função considerará uma String, e verificará o sistema para buscar
--   o usuário cadastrado no sistema com o e-mail igual à String. O
--   UserFull será então incluído, como Uswer (Que contém menos
--   informações) nos dados temporários do sistema. Estes dados poderão
--   então ser acessados em tempo de execução do sistema.
signUser :: String -> IO ()

-- | Esta função decidirá se algum usuário está atualmente logado no
--   sistema.
hasLoggedUser :: IO Bool

-- | Esta função retornará o Usuário atualmente logado no sistema.
getLoggedUser :: IO User

-- | Esta função deslogará um usuário do sistema, destruindo as informações
--   salvas temporariamente.
signOutUser :: IO ()

-- | Esta função tem o valor igual ao caminho para o arquivo json com os
--   dados das salas.
roomsJSON :: FilePath

-- | Esta função retorna uma lista contendo todas as salas cadastradas no
--   sistema.
fetchRooms :: IO [Room]

-- | Esta função verifica as salas cadastradas no sistema e retornará um
--   valor booleano true caso o sistema não possua nenhuma sala cadastrada
--   ainda, e false em caso contrário.
noRoomsYet :: IO Bool

-- | Esta função considera uma sala, e caso ela ainda não exista no
--   sistema, será incluída e um valor booleano true será retornado. Caso
--   contrário, um valor booleano false será retornado.
saveRoom :: Room -> IO Bool

-- | Esta função usa uma String contendo um código de sala e uma sala nova
--   para substituir a sala com o código dado pela versão nova da mesma
--   sala.
updateRoom :: String -> Room -> IO Bool

-- | Esta função recebe uma função e atualiza todas as salas do sistema
--   aplicando sobre elas a função determinada.
updateAllRooms :: (Room -> Room) -> IO Bool

-- | Esta função considera uma String, e caso ela corresponda ao código de
--   uma das salas, a função eliminará a sala equivalente do sistema,
--   retornando um valor booleano indicando se a remoção pôde ser feita.
deleteRoom :: String -> IO Bool

-- | Esta função considerará uma String, e retornará a sala cadastrada no
--   sistema com o código igual a esta String, caso exista.
getRoom :: String -> IO (Maybe Room)
instance Data.Aeson.Types.FromJSON.FromJSON Datatypes.User
instance Data.Aeson.Types.ToJSON.ToJSON Datatypes.User
instance Data.Aeson.Types.FromJSON.FromJSON Datatypes.UserFull
instance Data.Aeson.Types.ToJSON.ToJSON Datatypes.UserFull
instance Data.Aeson.Types.FromJSON.FromJSON Datatypes.ResourceKind
instance Data.Aeson.Types.ToJSON.ToJSON Datatypes.ResourceKind
instance Data.Aeson.Types.FromJSON.FromJSON Datatypes.Resource
instance Data.Aeson.Types.ToJSON.ToJSON Datatypes.Resource
instance Data.Aeson.Types.FromJSON.FromJSON Datatypes.RoomCategory
instance Data.Aeson.Types.ToJSON.ToJSON Datatypes.RoomCategory
instance Data.Aeson.Types.FromJSON.FromJSON Datatypes.Reservation
instance Data.Aeson.Types.ToJSON.ToJSON Datatypes.Reservation
instance Data.Aeson.Types.FromJSON.FromJSON Datatypes.Room
instance Data.Aeson.Types.ToJSON.ToJSON Datatypes.Room


module Handlers.UserHandler

-- | Esta função considera uma String e decide se um usuário com o e-mail
--   igual a esta String existe no sistema.
userExists :: String -> IO Bool

-- | Dada uma String, esta função a converterá em um Password.
makePass :: String -> Password

-- | Esta função considerará uma String contendo um e-mail e avaliará outra
--   String, decidindo se ela equivale à senha do usuário com o e-mail
--   fornecido. A resposta é então retornada em forma de valor booleano.
correctPassword :: String -> String -> IO Bool

-- | Dada uma String contendo um e-mail, esta função procurará no sistema
--   um Userfull com este e-mail, e retornará a sua versão com as
--   informações essenciais para o funcionamento do sistema, omitindo dados
--   sensíveis: um User.
retrieveUser :: String -> IO User

-- | Dadas três Strings contendo respectivamente o e-mail, a senha e o nome
--   do usuário, e um valor booleano indicando se trata-se de um
--   administrador, esta função cria um novo usuário e o armazena no
--   sistema.
registerNewUser :: String -> String -> String -> Bool -> IO ()

-- | Esta função recebe um usuário e o remove do sistema.
removeUser :: User -> IO ()
instance GHC.Show.Show Datatypes.User


module Handlers.RoomsHandler

-- | Função que, dadas todas as informações de uma sala, a cria e a
--   persiste no banco de dados, retornando o booleano que representa o
--   sucesso da operação
createRoom :: String -> [Resource] -> RoomCategory -> Int -> String -> IO Bool

-- | Função auxiliar que, dada uma tupla com um Integer para o ano e um Int
--   para mÊs, dia, hora e minuto, respectivamente, cria um LocalTime.
makeTime :: (Integer, Int, Int, Int, Int) -> LocalTime

-- | Esta função recebe uma sala e um horário, e verifica se esta sala
--   estará livre neste horário, respondendo com um valor booleano.
isFree :: Room -> LocalTime -> Bool

-- | Esta função criará uma reserva em uma das salas, a partir do código da
--   mesma, do nome do responsável pela reserva, e das tuplas especificando
--   data e horário de finalização do evento.
makeReservation :: String -> String -> String -> (Integer, Int, Int, Int, Int) -> (Integer, Int, Int, Int, Int) -> IO Bool

-- | Esta função deletará uma função identificada pelo código da sala e
--   nome do responsável, e pela tupla do horário de início do evento.
deleteReservation :: String -> String -> (Integer, Int, Int, Int, Int) -> IO Bool

-- | Dada uma sala, identificada pelo seu código, um horário, representado
--   em forma de tupla e um nome de usuário, esta função retornará a
--   reserva com os dados equivalentes.
findReservation :: String -> (Integer, Int, Int, Int, Int) -> String -> IO Reservation

-- | Dada uma sala, identificada pelo seu código, e um horário em forma de
--   tupla, esta função retornará a reserva da sala cujo evento se inicie
--   no horário dado.
findReservationEasy :: String -> (Integer, Int, Int, Int, Int) -> IO Reservation

-- | Esta função alterará o horário de uma reserva (identificada pelo
--   código de sua sala, pelo seu responsável e horário de início). Caso
--   não seja possível fazer a alteração, nada será feito. A função
--   retornará um valor booleano indicando se foi possível fazer a
--   operação.
editReservation :: String -> String -> (Integer, Int, Int, Int, Int) -> (Integer, Int, Int, Int, Int) -> (Integer, Int, Int, Int, Int) -> IO Bool

-- | Dado um LocalTime para comparação, esta função irá retirar de uma
--   determinada sala as reservas finalizadas antes deste horário.
cleanReservations :: LocalTime -> Room -> Room

-- | Esta função removerá de todas as salas as reservas cujo horário de
--   final do evento já passou.
cleanAllReservations :: IO Bool

-- | Dado um dia representado em uma tupla e um código de sala, esta função
--   criará um relatório em texto com todas as reservas que esta sala tem
--   para o dia especificado.
createReportForTheRoom :: (Integer, Int, Int) -> Room -> String

-- | Dado um dia representado em uma tupla, esta função criará um relatório
--   em texto para todas as reservas de todas as salas para o dia
--   especificado.
createReportForTheDay :: (Integer, Int, Int) -> IO String

-- | Com uma categoria especificada, esta função verificará o sistema e
--   retornará a lista contendo todas as salas desta categoria.
searchRoomsCategory :: RoomCategory -> IO [Room]

-- | Com uma capacidade especificada, esta função verificará o sistema e
--   retornará a lista contendo todas as salas com esta capacidade ou mais.
searchRoomsCapacity :: Int -> IO [Room]

-- | Com um horário de início e fim especificado em forma de tupla, esta
--   função verificará o sistema e retornará a lista contendo todas as
--   salas que estejam livres neste horário.
searchRoomsTime :: (Integer, Int, Int, Int, Int) -> (Integer, Int, Int, Int, Int) -> IO [Room]

-- | Esta função recebe uma sala e um Resource e verifica se esta sala tem
--   o recurso e se o tem na quantidade especificada ou superior,
--   retornando a resposta em forma de valor booleano.
resourceIsEnough :: Room -> Resource -> Bool

-- | Esta função verificará se uma sala contém todos os recursos em uma
--   lista, e se os tem na quantidade especificada ou superior.
containsResources :: [Resource] -> Room -> Bool

-- | Com uma lista de recursos especificada, esta função verificará o
--   sistema e retornará a lista contendo todas as salas que supram esta
--   demanda.
searchRoomsResources :: [Resource] -> IO [Room]

-- | Dado um nome de usuário e uma sala, esta função verifica se a sala foi
--   reservada por este usuário para algum horário e retorna a resposta em
--   forma de valor booleano.
wasReservedBy :: String -> Room -> Bool

-- | Com um nome de usuário especificado, esta função verificará o sistema
--   e retornará a lista contendo todas as salas que foram reservadas para
--   algum horário por aquele usuário.
searchRoomsRequester :: String -> IO [Room]

-- | Esta função produzirá um texto contendo a lista de todas as categorias
--   de sala suportadas pelo sistema.
printCategories :: IO ()

-- | Esta função produzirá um texto listando todos os recursos oferecidos
--   pelas salas do sistema.
printResources :: IO ()
instance GHC.Show.Show Datatypes.Room
instance GHC.Show.Show Datatypes.Reservation
instance GHC.Classes.Ord Datatypes.Reservation
instance GHC.Show.Show Datatypes.Resource


module TUI.OutputScreens

-- | Typeclass Content, que estabelece operações de conteúdo para as telas
--   do sistema.
class Content a
getContent :: Content a => a -> String
nextScreens :: Content a => a -> Map Char Screen
instance TUI.OutputScreens.Content Datatypes.Screen


module Handlers.ErrorHandler

-- | Dada uma determinada tela do sistema e uma resposta, esta função
--   verifica se a resposta foi adequada àquela tela, retornando, em caso
--   positivo, a tela equivalente à resposta, ou em caso negativo, o
--   ErrorLog com a mensagem identificando qualerro existente na resposta.
validScreen :: Screen -> String -> IO (Either ErrorLog Screen)

-- | Dada uma String, esta função verificará se esta String é composta
--   unicamente pelo caractere <tt>R</tt>, respondendo com um valor
--   booleano.
singleCharIsR :: String -> Bool

-- | Esta função considerará um e-mail, em String, e decidirá se ele é
--   válido e livre ou se é inválido ou se já está em uso, retornando uma
--   mensagem de erro caso o e-mail não seja válido e livre.
checkNewEmail :: String -> IO (Either ErrorLog String)

-- | Esta função considerará um e-mail, em String, e decidirá se ele é
--   válido e está cadastrado. Caso não seja válido ou não esteja
--   cadastrado, retornará uma mensagem de erro. Caso a função receba como
--   parâmetro uma String composta apenas da letra R, responderá com a
--   String <a>Retornar</a>.
checkEmail :: String -> IO (Either ErrorLog String)

-- | Esta função considerará uma String determinada e decidirá se esta
--   String pode ser usada como senha neste sistema. Em caso negativo,
--   retornará uma mensagem de erro.
checkNewPass :: String -> IO (Either ErrorLog String)

-- | Esta função considera um e-mail e uma senha, e decide se a senha está
--   correta (caso em que retorna a própria senha) ou não (Caso em que
--   retorna a mensagem de erro correspondente.)
checkPass :: String -> String -> IO (Either ErrorLog String)

-- | Esta função considera uma String e decide se ela pode ser considerada
--   como um nome do usuário (apenas letras e espaços são permitidos). Caso
--   a String contenha um nome válido, o próprio nome será retornado. Caso
--   contrário, uma mensagem de erro será retornada.
checkName :: String -> IO (Either ErrorLog String)

-- | Esta função considera uma String e decide se ela representa
--   corretamente uma resposta de Sim ou Não (S ou N). Caso tenha mais de
--   um caractere ou não seja S ou N, retornará uma mensagem de erro. Caso
--   seja válida, a função retornará um Booleano. (True para S e False para
--   N).
yesOrNo :: String -> IO (Either ErrorLog Bool)

-- | Esta função considera uma Sting e decide se ela equivale ao código de
--   uma das salas cadastradas no sistema (Caso em que retornará uma
--   mensagem de erro). Caso contrário, a função retornará em que retornará
--   o próprio código.
checkNewRoomCode :: String -> IO (Either ErrorLog String)

-- | Esta função considera uma Sting e decide se ela equivale ao código de
--   uma das salas cadastradas no sistema (Caso em que retornará o próprio
--   código). Caso contrário, a função retornará uma mensagem de erro.
checkRoomCode :: String -> IO (Either ErrorLog String)

-- | Esta função considera uma String, e decidirá se ela equivale a uma
--   data válida. Em caso positivo, retornará o mesmo na forma de uma lista
--   de inteiros. Caso contrário, retornará uma mensagem de erro
--   equivalente ao problema encontrado.
checkDay :: String -> IO (Either ErrorLog [Int])

-- | Esta função considera uma String e decide se ela equivale a um
--   horário. Em caso positivo, retornará o horário em forma de Lista de
--   inteiros. Caso contrário, retornará a mensagem de erro equivalente ao
--   problema encontrado.
checkTime :: String -> IO (Either ErrorLog [Int])

-- | Esta função considera uma String e decide se ela pode ser usada como
--   descrição para uma reserva de sala. Em caso positivo, retornará a
--   mesma String. Caso contrário, retornará uma mensagem de erro.
checkDescription :: String -> IO (Either ErrorLog String)

-- | Esta função considera uma String e decide se ela representa uma das
--   categorias no sistema. Caso represente, a função retornará a Categoria
--   desejada, e em caso contrário, retornará uma mensagem de erro.
checkCategory :: String -> IO (Either ErrorLog RoomCategory)

-- | Esta função considera uma String e decide se ela contém um valor
--   inteiro entre zero e trezentos, caso no qual retornará o inteiro. Em
--   caso contrário, uma mensagem de erro será retornada.
checkNumber :: String -> IO (Either ErrorLog Int)

-- | Esta função considera uma String e decide se ela representa um dos
--   tipos de recursos oferecidos pelas salas do sistema. Caso afirmativo,
--   a função retornará o ResourceKind solicitado. Caso contrário, uma
--   mensagem de erro será retornada.
checkResource :: String -> IO (Either ErrorLog ResourceKind)

-- | Esta função considera uma String e decide se ela equivale a uma das
--   opções (1, 2, 3, ou 4), caso em que retorna a opção como um inteiro.
--   Em caso contrário, retornará uma mensagem de erro.
checkFilter :: String -> IO (Either ErrorLog Int)


module TUI.ScreenListeners

-- | Typeclass que estabelece as operações de ações a ser executadas em
--   cada tela do sistema.
class Action a
useContent :: Action a => a -> IO Screen

-- | Esta é a função responsável por encontrar e controlar quais telas
--   serão exibidas no sistema SIGES.
userInteraction :: Screen -> IO Screen
waitInput :: IO String

-- | Esta função exibirá um prompt e captará a resposta digitada pelo
--   usuário.
getAnswer :: IO String

-- | Função responsável por captar a senha do usuário da entrada e garantir
--   que ela seja exibida apenas com asteriscos, como forma de melhorar a
--   segurança.
getPassword :: IO String

-- | Dada uma Mônada de String qualquer e uma função de verificação, esta
--   função aplicará a função sobre a String. Caso a String passe na
--   verificação fornecida, será retornada. Caso contrário, uma mensagem de
--   erro será exibida e a função será repetida com uma nova entrada.
getInputData :: IO String -> (String -> IO (Either ErrorLog a)) -> IO a

-- | Esta filtrará salas pelos filtros escolhidos pelo usuário. MAis de um
--   filtro podem ser aplicados simultaneamente, neste caso, a função
--   perguntará um a um quais filtros devem ser adicionados.
getRoomsFilter :: [Room] -> IO [Room]

-- | Função auxiliar à função de filtro de salas. Esta função lerá da
--   entrada recursos que o usuário deseja buscar e suas respectivas
--   quantidades, e então produzirá uma lista de recursos com estas
--   informações e a retornará.
getResources :: IO [Resource]
instance TUI.ScreenListeners.Action Datatypes.Screen
